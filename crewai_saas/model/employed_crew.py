from typing import ClassVar
from typing import Optional
from crewai_saas.core.enum import CycleStatus, MessageRole
from pydantic import BaseModel

from crewai_saas.model.base import CreateBase, InDBBase, ResponseBase, UpdateBase
from crewai_saas.model.crew import Crew

#   public.employed_crew (
#     id bigint generated by default as identity not null,
#     created_at timestamp without time zone not null default now(),
#     crew_id bigint null,
#     is_favorite boolean not null default false,
#     user_id bigint not null,
#     is_deleted boolean not null default false,
#     constraint employed_crew_pkey primary key (id),
#     constraint employed_crew_id_key unique (id),
#     constraint employed_crew_crew_id_fkey foreign key (crew_id) references crew (id)

class EmployedCrewCreate(CreateBase):
    crew_id: int
    user_id: int

class EmployedCrewUpdate(UpdateBase):
    is_favorite: bool

class EmployedCrew(ResponseBase):
    crew_id: int
    user_id: int
    is_favorite: bool
    is_deleted: bool
    is_owner: bool

    table_name: ClassVar[str] = "employed_crew"

class EmployedCrewInDB(InDBBase):
    crew_id: int
    user_id: int
    is_favorite: bool
    is_deleted: bool
    is_owner: bool

class EmployedCrewWithCrew(EmployedCrew):
    crew: Crew


# chat
#   public.chat (
#     id bigint generated by default as identity not null,
#     created_at timestamp without time zone not null default now(),
#     updated_at timestamp without time zone not null default now(),
#     employed_crew_id bigint not null,
#     is_deleted boolean not null,
#     constraint chat_pkey primary key (id),
#     constraint chat_id_key unique (id),
#     constraint chat_cycle_id_fkey foreign key (employed_crew_id) references cycle (id),
#     constraint chat_employed_crew_id_fkey foreign key (employed_crew_id) references employed_crew (id)

class ChatCreate(CreateBase):
    employed_crew_id: int

class ChatUpdate(UpdateBase):
    title: str

class Chat(ResponseBase):
    employed_crew_id: int
    is_deleted: bool
    title: str

    table_name: ClassVar[str] = "chat"

class ChatInDB(InDBBase):
    employed_crew_id: int
    is_deleted: bool
    title: str


# message
# create table
#   public.message (
#     id bigint generated by default as identity not null,
#     created_at timestamp without time zone not null default now(),
#     cost float null,
#     input_token integer null,
#     output_token integer null,
#     content text null,
#     task_id bigint null,
#     cycle_id bigint null,
#     role character varying null,
#     chat_id bigint null,
#     constraint message_pkey primary key (id),
#     constraint message_id_key unique (id),
#     constraint message_chat_id_fkey foreign key (chat_id) references chat (id),
#     constraint message_cycle_id_fkey foreign key (cycle_id) references cycle (id),
#     constraint message_task_id_fkey foreign key (task_id) references task (id)
#   ) tablespace pg_default;

class MessageRequest(BaseModel):
    content: str
    role: MessageRole

class MessageCreate(CreateBase):
    content: str
    task_id: Optional[int] = None
    cycle_id: int
    role: MessageRole
    chat_id: int
    class Config:
        use_enum_values = True  # Enum 값을 문자열로 자동 변환
        arbitrary_types_allowed = True  # 사용자 정의 타입을 허용

class MessageUpdate(UpdateBase):
    cost: Optional[float] = 0
    input_token: Optional[int] = None
    output_token: Optional[int] = None
    class Config:
        arbitrary_types_allowed = True  # 사용자 정의 타입을 허용


class Message(ResponseBase):
    cost: Optional[float]
    input_token: Optional[int]
    output_token: Optional[int]
    content: str
    task_id: Optional[int]
    cycle_id: int
    role: MessageRole
    chat_id: int

    table_name: ClassVar[str] = "message"

    class Config:
        use_enum_values = True  # Enum 값을 문자열로 자동 변환
        arbitrary_types_allowed = True  # 사용자 정의 타입을 허용

class MessageInDB(InDBBase):
    cost: float
    input_token: int
    output_token: int
    content: str
    task_id: int
    cycle_id: int
    role: MessageRole
    chat_id: int
    class Config:
        use_enum_values = True  # Enum 값을 문자열로 자동 변환
        arbitrary_types_allowed = True  # 사용자 정의 타입을 허용

class MessageSimple(InDBBase):
    content: str
    role: MessageRole
    class Config:
        use_enum_values = True  # Enum 값을 문자열로 자동 변환
        arbitrary_types_allowed = True  # 사용자 정의 타입을 허용


# cycle
# create table
#   public.cycle (
#     id bigint generated by default as identity not null,
#     created_at timestamp without time zone not null default now(),
#     status character varying not null default 'STARTED'::character varying,
#     result text null,
#     cost numeric null,
#     price numeric null,
#     total_token integer null,
#     chat_id bigint not null,
#     constraint cycle_pkey primary key (id),
#     constraint cycle_id_key unique (id),
#     constraint cycle_chat_id_fkey foreign key (chat_id) references chat (id)
#   ) tablespace pg_default;

class CycleCreate(CreateBase):
    chat_id: int
    execution_id: Optional[str] = None
    class Config:
        use_enum_values = True  # Enum 값을 문자열로 자동 변환
        arbitrary_types_allowed = True  # 사용자 정의 타입을 허용



class CycleUpdate(UpdateBase):
    status: CycleStatus
    cost: Optional[float] = None
    price: Optional[float] = None
    total_token: Optional[int] = None
    class Config:
        use_enum_values = True  # Enum 값을 문자열로 자동 변환
        arbitrary_types_allowed = True  # 사용자 정의 타입을 허용

class CycleUpdateStatus(UpdateBase):
    status: CycleStatus
    execution_id: Optional[str] = None
    class Config:
        use_enum_values = True  # Enum 값을 문자열로 자동 변환
        arbitrary_types_allowed = True  # 사용자 정의 타입을 허용

class Cycle(ResponseBase):
    status: CycleStatus
    execution_id: Optional[str] = None
    cost: Optional[float]
    price: Optional[float]
    total_token: Optional[int]
    chat_id: Optional[int]

    table_name: ClassVar[str] = "cycle"
    class Config:
        use_enum_values = True  # Enum 값을 문자열로 자동 변환
        arbitrary_types_allowed = True  # 사용자 정의 타입을 허용

class CycleInDB(InDBBase):
    status: CycleStatus
    execution_id: Optional[str] = None
    cost: Optional[float]
    price: Optional[float]
    total_token: Optional[int]
    chat_id: Optional[int]
    class Config:
        use_enum_values = True  # Enum 값을 문자열로 자동 변환
        arbitrary_types_allowed = True  # 사용자 정의 타입을 허용

class CycleWithMessage(Cycle):
    messages: list[MessageSimple]

class ChatWithAll(Chat):
    cycle: CycleWithMessage